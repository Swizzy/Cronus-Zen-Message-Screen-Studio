name: Build and Publish

on:
  push:
    branches:
      - master
      - dev

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore dependencies
        run: dotnet restore "Cronus Zen Message Screen Studio/Cronus Zen Message Screen Studio.csproj"
      - name: Build
        run: dotnet build "Cronus Zen Message Screen Studio/Cronus Zen Message Screen Studio.csproj" --configuration Release --no-restore
      - name: Publish single file executable
        run: dotnet publish "Cronus Zen Message Screen Studio/Cronus Zen Message Screen Studio.csproj" --configuration Release --self-contained true -p:PublishSingleFile=true -p:RuntimeIdentifier=win-x64 -o ./publish
      - name: Get published exe name
        id: get_exe
        run: |
          $exe = Get-ChildItem ./publish/*.exe | Select-Object -First 1
          echo "exe_name=$($exe.Name)" >> $env:GITHUB_OUTPUT
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.GitVersion_SemVer }}
          release_name: Release v${{ env.GitVersion_SemVer }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/${{ steps.get_exe.outputs.exe_name }}
          asset_name: ${{ steps.get_exe.outputs.exe_name }}
          asset_content_type: application/octet-stream
      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: Cronus Zen Message Screen Studio
          path: ./publish
